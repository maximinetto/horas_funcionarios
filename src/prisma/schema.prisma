// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("OFFICIALS_SCHEDULES_DB_URL")
}

model Official {
  id            Int             @id @default(autoincrement())
  recordNumber  Int             @unique @map("record_number")
  firstName     String          @map("first_name") @db.VarChar(255)
  lastName      String          @map("last_name") @db.VarChar(255)
  position      String          @db.VarChar(255)
  contract      Contract
  type          TypeOfOfficials
  dateOfEntry   DateTime        @map("date_of_entry") @db.Date
  chargeNumber  Int             @map("charge_number")
  actualBalances ActualBalance[]

  @@map("officials")
}

model HourlyBalance {
  id                   String                @id @default(uuid())
  year                 Int
  actualBalanceId      String                @map("actual_balance_id")
  actualBalance        ActualBalance         @relation(fields: [actualBalanceId], references: [id])
  hourlyBalanceTeacher HourlyBalanceTeacher?
  hourlyBalanceTAS     HourlyBalanceTAS?

  @@unique([year, actualBalanceId], name: "unique_year_actual_balance")
  @@map("hourly_balance")
}

model HourlyBalanceTAS {
  id              String        @id @default(uuid())
  working         BigInt
  nonWorking      BigInt        @map("non_working")
  simple          BigInt
  hourlyBalanceId String        @unique @map("hourly_balance_id")
  hourlyBalance   HourlyBalance @relation(fields: [hourlyBalanceId], references: [id])

  @@map("hourly_balance_tas")
}

model HourlyBalanceTeacher {
  id              String        @id @default(uuid())
  balance         BigInt
  hourlyBalanceId String        @unique @map("hourly_balance_id")
  hourlyBalance   HourlyBalance @relation(fields: [hourlyBalanceId], references: [id])

  @@map("hourly_balance_teacher")
}

model ActualBalance {
  id            String          @id @default(uuid())
  year          Int
  total         BigInt
  officialId    Int             @map("official_id")
  official      Official        @relation(fields: [officialId], references: [id])
  calculations  Calculation[]
  hourlyBalances HourlyBalance[]

  @@unique([year, officialId], name: "unique_year_official")
  @@map("actual_balance")
}

model Calculation {
  id                 String              @id @default(uuid())
  year               Int
  month              Month
  observations       String?             @db.Text
  actualBalanceId    String              @map("actual_balance_id")
  actualBalance      ActualBalance       @relation(fields: [actualBalanceId], references: [id])
  calculationTAS     CalculationTAS?
  calculationTeacher CalculationTeacher?

  @@unique([year, month, actualBalanceId], name: "unique_year_month_actual_balance")
  @@map("calculation")
}

model CalculationTAS {
  id                       String      @id @default(uuid())
  surplusBusiness          BigInt      @map("surplus_business")
  surplusNonWorking        BigInt      @map("surplus_non_working")
  surplusSimple            BigInt      @map("surplus_simple")
  discount                 BigInt
  workingOvertime          BigInt      @map("working_overtime")
  workingNightOvertime     BigInt      @map("working_night_overtime")
  nonWorkingOvertime       BigInt      @map("non_working_overtime")
  nonWorkingNightOvertime  BigInt      @map("non_working_night_overtime")
  compensatedNightOvertime BigInt      @map("compensated_night_overtime")
  calculationId            String      @unique @map("calculation_id")
  calculation              Calculation @relation(fields: [calculationId], references: [id])

  @@map("calculation_tas")
}

model CalculationTeacher {
  id            String      @id @default(uuid())
  surplus       BigInt
  discount      BigInt
  calculationId String      @unique @map("calculation_id")
  calculation   Calculation @relation(fields: [calculationId], references: [id])

  @@map("calculation_teacher")
}

enum Contract {
  PERMANENT
  TEMPORARY
}

enum TypeOfOfficials {
  TEACHER
  NOT_TEACHER
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}
